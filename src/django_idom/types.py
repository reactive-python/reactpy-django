from __future__ import annotations

from dataclasses import dataclass
from typing import (
    Any,
    Awaitable,
    Callable,
    Generic,
    Iterable,
    Optional,
    Tuple,
    TypeVar,
    Union,
)

from django.db.models.base import Model
from django.db.models.query import QuerySet
from django.views.generic import View
from typing_extensions import ParamSpec


try:
    from django_filters import FilterSet
except ImportError:
    FilterSet = TypeVar("FilterSet")

__all__ = ["_Result", "_Params", "_Data", "IdomWebsocket", "Query", "Mutation"]

_Result = TypeVar("_Result", bound=Union[Model, QuerySet[Any]])
_Params = ParamSpec("_Params")
_Data = TypeVar("_Data")


@dataclass
class IdomWebsocket:
    """Websocket returned by the `use_websocket` hook."""

    scope: dict
    close: Callable[[Optional[int]], Awaitable[None]]
    disconnect: Callable[[int], Awaitable[None]]
    view_id: str


@dataclass
class Query(Generic[_Data]):
    """Queries generated by the `use_query` hook."""

    data: _Data
    loading: bool
    error: Exception | None
    refetch: Callable[[], None]


@dataclass
class Mutation(Generic[_Params]):
    """Mutations generated by the `use_mutation` hook."""

    execute: Callable[_Params, None]
    loading: bool
    error: Exception | None
    reset: Callable[[], None]


@dataclass
class ViewComponentIframe:
    view: View | Callable
    args: Iterable
    kwargs: dict


@dataclass
class TableConfig:
    # Will check if value exists in either the model or TableConfig class
    fields: Iterable[str]

    model: Model | None = None

    # Allows for renaming columns
    column_names: Iterable[Tuple[str, str]] | None = None

    # By default, all fields are sortable
    sortable_fields: Iterable[str] | None = None

    # https://django-tables2.readthedocs.io/en/latest/pages/column-attributes.html#id1
    # Probably want a callable API similar to  this `func(value:Any, node_type:str)``
    column_attrs: dict[Callable] | None = None

    # https://django-tables2.readthedocs.io/en/latest/pages/column-attributes.html#row-attributes
    # Probably want a callable API similar to  this `func(record:Model, node_type:str)``
    row_attrs: dict[Callable] | None = None

    # https://sparkbyexamples.com/pandas/pandas-sort-dataframe-by-multiple-columns/
    order_by: Iterable[str] | None = None

    # https://django-tables2.readthedocs.io/en/latest/pages/filtering.html
    filterset: FilterSet | None = None

    # Zero means no pagination.
    # https://docs.djangoproject.com/en/4.1/ref/paginator/#django.core.paginator.Paginator
    pagination: int = 0

    # Allows for a custom render function to change render layout
    renderer: Callable | None = None


bs_table_column_attrs = {}
bs_table_row_attrs = {}
